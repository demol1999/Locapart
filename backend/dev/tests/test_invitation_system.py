#!/usr/bin/env python3
"""
Script de test pour le syst√®me d'invitation des locataires
"""

import sys
import os
import asyncio
from datetime import datetime, timedelta

# Ajouter le repertoire parent au PYTHONPATH
sys.path.append(os.path.dirname(os.path.abspath(__file__)))

from database import SessionLocal
from models import UserAuth, Tenant, Lease, TenantInvitation
from tenant_invitation_service import get_tenant_invitation_service
from email_service import create_email_service_from_env

async def test_invitation_system():
    """Test complet du syst√®me d'invitation"""
    
    print("Test du syst√®me d'invitation des locataires")
    print("=" * 50)
    
    db = SessionLocal()
    
    try:
        # 1. V√©rifier qu'il y a des donn√©es de test
        user_count = db.query(UserAuth).count()
        tenant_count = db.query(Tenant).count()
        lease_count = db.query(Lease).count()
        
        print(f"Donn√©es existantes:")
        print(f"  - Utilisateurs: {user_count}")
        print(f"  - Locataires: {tenant_count}")
        print(f"  - Baux: {lease_count}")
        
        if user_count == 0:
            print("\n‚ùå Aucun utilisateur trouv√©. Cr√©ez d'abord un utilisateur.")
            return False
        
        if tenant_count == 0:
            print("\n‚ùå Aucun locataire trouv√©. Cr√©ez d'abord un locataire.")
            return False
        
        # 2. Prendre le premier utilisateur et locataire
        user = db.query(UserAuth).first()
        tenant = db.query(Tenant).first()
        
        print(f"\nTest avec:")
        print(f"  - Utilisateur: {user.email}")
        print(f"  - Locataire: {tenant.email}")
        
        # 3. Cr√©er un bail si n√©cessaire
        lease = db.query(Lease).filter(
            Lease.tenant_id == tenant.id,
            Lease.created_by == user.id
        ).first()
        
        if not lease:
            print("\nüîß Cr√©ation d'un bail de test...")
            
            # Trouver un appartement
            from models import Apartment
            apartment = db.query(Apartment).first()
            
            if not apartment:
                print("‚ùå Aucun appartement trouv√©. Impossible de cr√©er un bail.")
                return False
            
            lease = Lease(
                tenant_id=tenant.id,
                apartment_id=apartment.id,
                created_by=user.id,
                start_date=datetime.now(),
                end_date=datetime.now() + timedelta(days=365),
                monthly_rent=800.00,
                deposit=800.00,
                status="ACTIVE"
            )
            
            db.add(lease)
            db.commit()
            db.refresh(lease)
            print(f"   ‚úÖ Bail cr√©√© (ID: {lease.id})")
        
        # 4. Tester le service d'invitation
        print(f"\nüß™ Test du service d'invitation...")
        
        invitation_service = get_tenant_invitation_service(db)
        
        # V√©rifier la configuration email
        print(f"   üìß V√©rification du service email...")
        if invitation_service.email_service.validate_provider():
            print(f"   ‚úÖ Service email configur√© correctement")
        else:
            print(f"   ‚ö†Ô∏è  Service email non configur√© (normal en d√©veloppement)")
        
        # 5. Cr√©er une invitation
        print(f"\nüì® Cr√©ation d'une invitation...")
        
        try:
            invitation = invitation_service.create_invitation(
                tenant_id=tenant.id,
                invited_by_user_id=user.id,
                expires_in_hours=24  # 24h pour le test
            )
            
            print(f"   ‚úÖ Invitation cr√©√©e:")
            print(f"      - ID: {invitation.id}")
            print(f"      - Token: {invitation.invitation_token[:20]}...")
            print(f"      - Expire le: {invitation.token_expires_at}")
            
        except Exception as e:
            print(f"   ‚ùå Erreur lors de la cr√©ation: {e}")
            return False
        
        # 6. Tester la validation du token
        print(f"\nüîç Test de validation du token...")
        
        validation_result = invitation_service.validate_invitation_token(invitation.invitation_token)
        
        if validation_result:
            print(f"   ‚úÖ Token valide:")
            print(f"      - Locataire: {validation_result['tenant_name']}")
            print(f"      - Email: {validation_result['tenant_email']}")
        else:
            print(f"   ‚ùå Token invalide")
            return False
        
        # 7. Tester l'envoi d'email (seulement si configur√©)
        email_provider = os.getenv("EMAIL_PROVIDER", "").lower()
        if email_provider and os.getenv("RESEND_API_KEY" if email_provider == "resend" else f"{email_provider.upper()}_API_KEY"):
            print(f"\nüì§ Test d'envoi d'email...")
            
            try:
                await invitation_service.send_invitation_email(invitation.id)
                print(f"   ‚úÖ Email envoy√© avec succ√®s")
                
                # Recharger l'invitation pour voir les changements
                db.refresh(invitation)
                print(f"      - Statut envoy√©: {invitation.is_sent}")
                print(f"      - Envoy√© le: {invitation.sent_at}")
                
            except Exception as e:
                print(f"   ‚ö†Ô∏è  Erreur d'envoi d'email: {e}")
                print(f"      (Ceci est normal si la configuration email n'est pas compl√®te)")
        else:
            print(f"\n‚ö†Ô∏è  Configuration email non trouv√©e - test d'envoi ignor√©")
            print(f"   Configurez EMAIL_PROVIDER et les cl√©s API dans .env pour tester l'envoi")
        
        # 8. Tester l'utilisation du token
        print(f"\n‚úÖ Test d'utilisation du token...")
        
        success = invitation_service.use_invitation_token(invitation.invitation_token)
        
        if success:
            print(f"   ‚úÖ Token utilis√© avec succ√®s")
            
            # V√©rifier que le token ne peut plus √™tre utilis√©
            validation_result_after = invitation_service.validate_invitation_token(invitation.invitation_token)
            if not validation_result_after:
                print(f"   ‚úÖ Token invalid√© apr√®s utilisation")
            else:
                print(f"   ‚ùå Token encore valide apr√®s utilisation")
                return False
        else:
            print(f"   ‚ùå √âchec d'utilisation du token")
            return False
        
        # 9. Statistiques finales
        print(f"\nüìä Statistiques finales:")
        
        invitation_count = db.query(TenantInvitation).count()
        sent_count = db.query(TenantInvitation).filter(TenantInvitation.is_sent == True).count()
        used_count = db.query(TenantInvitation).filter(TenantInvitation.is_used == True).count()
        
        print(f"   - Total invitations: {invitation_count}")
        print(f"   - Invitations envoy√©es: {sent_count}")
        print(f"   - Invitations utilis√©es: {used_count}")
        
        print(f"\nüéâ Tous les tests ont r√©ussi!")
        return True
        
    except Exception as e:
        print(f"\n‚ùå Erreur durant les tests: {e}")
        import traceback
        traceback.print_exc()
        return False
        
    finally:
        db.close()

def main():
    """Fonction principale"""
    
    print("Script de test - Syst√®me d'invitation LocAppart")
    print("=" * 60)
    
    # V√©rifier les d√©pendances
    try:
        import resend
        print("‚úÖ Module 'resend' install√©")
    except ImportError:
        print("‚ö†Ô∏è  Module 'resend' non install√© (optionnel)")
    
    try:
        import jinja2
        print("‚úÖ Module 'jinja2' install√©")
    except ImportError:
        print("‚ùå Module 'jinja2' non install√© - requis pour les templates")
        print("   Installez avec: pip install jinja2")
        return 1
    
    # V√©rifier la configuration
    print(f"\nüîß Configuration d√©tect√©e:")
    print(f"   - EMAIL_PROVIDER: {os.getenv('EMAIL_PROVIDER', 'non configur√©')}")
    print(f"   - EMAIL_FROM: {os.getenv('EMAIL_FROM', 'non configur√©')}")
    print(f"   - RESEND_API_KEY: {'configur√©' if os.getenv('RESEND_API_KEY') else 'non configur√©'}")
    
    # Lancer les tests
    print(f"\nüöÄ Lancement des tests...\n")
    
    try:
        success = asyncio.run(test_invitation_system())
        
        if success:
            print(f"\nüéØ R√âSUM√â: Tous les tests ont r√©ussi!")
            print(f"\nüìã Le syst√®me d'invitation est op√©rationnel:")
            print(f"   1. ‚úÖ Cr√©ation d'invitations")
            print(f"   2. ‚úÖ Validation de tokens")
            print(f"   3. ‚úÖ Utilisation de tokens")
            print(f"   4. ‚úÖ Audit trail complet")
            
            if os.getenv("EMAIL_PROVIDER"):
                print(f"   5. ‚úÖ Service email configur√©")
            else:
                print(f"   5. ‚ö†Ô∏è  Service email √† configurer (voir .env.email.example)")
            
            print(f"\nüöÄ Pr√™t pour la production!")
            return 0
        else:
            print(f"\n‚ùå Certains tests ont √©chou√©")
            return 1
            
    except Exception as e:
        print(f"\nüí• Erreur fatale: {e}")
        return 1

if __name__ == "__main__":
    exit(main())