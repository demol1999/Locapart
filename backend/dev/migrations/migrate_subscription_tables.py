#!/usr/bin/env python3
"""
Script de migration pour cr√©er les tables d'abonnement et de paiement Stripe
"""
import sys
import os
sys.path.append(os.path.dirname(os.path.abspath(__file__)))

from sqlalchemy import text
from database import engine, SessionLocal
from models import Base, UserSubscription, Payment, SubscriptionType, SubscriptionStatus
import models

def create_subscription_tables():
    """Cr√©e les tables d'abonnement et de paiement"""
    print("üöÄ Cr√©ation des tables d'abonnement et de paiement...")
    
    try:
        # Cr√©er toutes les tables d√©finies dans les mod√®les
        Base.metadata.create_all(bind=engine)
        print("‚úÖ Tables cr√©√©es avec succ√®s")
        
        # Cr√©er des abonnements gratuits par d√©faut pour tous les utilisateurs existants
        create_default_subscriptions()
        
    except Exception as e:
        print(f"‚ùå Erreur lors de la cr√©ation des tables: {e}")
        return False
    
    return True

def create_default_subscriptions():
    """Cr√©e des abonnements gratuits par d√©faut pour tous les utilisateurs existants"""
    print("üìù Cr√©ation des abonnements par d√©faut...")
    
    db = SessionLocal()
    try:
        # R√©cup√©rer tous les utilisateurs qui n'ont pas d'abonnement
        users_without_subscription = db.execute(text("""
            SELECT ua.id, ua.email 
            FROM user_auth ua 
            LEFT JOIN user_subscriptions us ON ua.id = us.user_id 
            WHERE us.id IS NULL
        """)).fetchall()
        
        print(f"üìä {len(users_without_subscription)} utilisateurs sans abonnement trouv√©s")
        
        for user_id, email in users_without_subscription:
            # Cr√©er un abonnement gratuit par d√©faut
            subscription = UserSubscription(
                user_id=user_id,
                subscription_type=SubscriptionType.FREE,
                status=SubscriptionStatus.ACTIVE,
                apartment_limit=3
            )
            db.add(subscription)
            print(f"‚úÖ Abonnement gratuit cr√©√© pour l'utilisateur {email} (ID: {user_id})")
        
        db.commit()
        print(f"‚úÖ {len(users_without_subscription)} abonnements par d√©faut cr√©√©s")
        
    except Exception as e:
        print(f"‚ùå Erreur lors de la cr√©ation des abonnements par d√©faut: {e}")
        db.rollback()
    finally:
        db.close()

def verify_tables():
    """V√©rifie que les tables ont √©t√© cr√©√©es correctement"""
    print("üîç V√©rification des tables...")
    
    db = SessionLocal()
    try:
        # V√©rifier la table user_subscriptions
        subscription_count = db.query(UserSubscription).count()
        print(f"üìä Nombre d'abonnements: {subscription_count}")
        
        # V√©rifier la table payments
        payment_count = db.query(Payment).count()
        print(f"üí≥ Nombre de paiements: {payment_count}")
        
        # Afficher quelques statistiques
        free_subscriptions = db.query(UserSubscription).filter(
            UserSubscription.subscription_type == SubscriptionType.FREE
        ).count()
        
        premium_subscriptions = db.query(UserSubscription).filter(
            UserSubscription.subscription_type == SubscriptionType.PREMIUM
        ).count()
        
        print(f"üìà Abonnements gratuits: {free_subscriptions}")
        print(f"üåü Abonnements premium: {premium_subscriptions}")
        
        return True
        
    except Exception as e:
        print(f"‚ùå Erreur lors de la v√©rification: {e}")
        return False
    finally:
        db.close()

def main():
    """Fonction principale de migration"""
    print("=" * 50)
    print("üîÑ MIGRATION DES TABLES D'ABONNEMENT")
    print("=" * 50)
    
    # √âtape 1: Cr√©er les tables
    if not create_subscription_tables():
        print("‚ùå √âchec de la migration")
        return
    
    # √âtape 2: V√©rifier les tables
    if not verify_tables():
        print("‚ö†Ô∏è  Tables cr√©√©es mais v√©rification √©chou√©e")
        return
    
    print("=" * 50)
    print("‚úÖ MIGRATION TERMIN√âE AVEC SUCC√àS")
    print("=" * 50)
    print()
    print("üìã Prochaines √©tapes:")
    print("1. Configurer les variables d'environnement Stripe:")
    print("   - STRIPE_SECRET_KEY")
    print("   - STRIPE_PUBLISHABLE_KEY") 
    print("   - STRIPE_WEBHOOK_SECRET")
    print("   - STRIPE_PREMIUM_PRICE_ID")
    print()
    print("2. Cr√©er un produit et prix dans le dashboard Stripe")
    print("3. Configurer les webhooks Stripe vers /api/stripe/webhook")
    print("4. Tester le flux de paiement")

if __name__ == "__main__":
    main()