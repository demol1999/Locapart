"""
Middleware de s√©curit√© avanc√© pour LocAppart
"""
import time
import hashlib
import hmac
import os
from typing import Set
from fastapi import Request, HTTPException
from starlette.middleware.base import BaseHTTPMiddleware
from starlette.responses import Response

class SecurityMiddleware(BaseHTTPMiddleware):
    """Middleware de s√©curit√© avanc√©"""
    
    def __init__(self, app, allowed_hosts: Set[str] = None):
        super().__init__(app)
        self.allowed_hosts = allowed_hosts or {"localhost", "127.0.0.1"}
        self.blocked_ips: Set[str] = set()
        self.suspicious_patterns = [
            # Patterns d'attaques communes
            r'<script',
            r'javascript:',
            r'eval\(',
            r'union.*select',
            r'drop.*table',
            r'../../../',
            r'\.\./',
            r'cmd=',
            r'exec\(',
            r'system\(',
        ]
    
    async def dispatch(self, request: Request, call_next):
        """Traite chaque requ√™te"""
        
        # 1. V√©rification de l'host
        if not self._check_host(request):
            raise HTTPException(status_code=400, detail="Host non autoris√©")
        
        # 2. V√©rification IP blacklist
        client_ip = self._get_client_ip(request)
        if client_ip in self.blocked_ips:
            raise HTTPException(status_code=403, detail="Acc√®s refus√©")
        
        # 3. D√©tection d'attaques
        if self._detect_attack_patterns(request):
            self._log_suspicious_activity(request)
            raise HTTPException(status_code=400, detail="Requ√™te suspecte d√©tect√©e")
        
        # 4. Limite de taille des requ√™tes
        if not self._check_request_size(request):
            raise HTTPException(status_code=413, detail="Requ√™te trop volumineuse")
        
        # 5. Traiter la requ√™te
        start_time = time.time()
        response = await call_next(request)
        process_time = time.time() - start_time
        
        # 6. Ajouter headers de s√©curit√©
        self._add_security_headers(response)
        
        # 7. Logger les temps de r√©ponse lents (potentielle attaque DoS)
        if process_time > 5.0:  # Plus de 5 secondes
            self._log_slow_request(request, process_time)
        
        return response
    
    def _get_client_ip(self, request: Request) -> str:
        """Obtient la vraie IP du client"""
        # V√©rifier les headers de proxy
        forwarded_for = request.headers.get("X-Forwarded-For")
        if forwarded_for:
            return forwarded_for.split(",")[0].strip()
        
        real_ip = request.headers.get("X-Real-IP")
        if real_ip:
            return real_ip
        
        return request.client.host if request.client else "unknown"
    
    def _check_host(self, request: Request) -> bool:
        """V√©rifie que l'host est autoris√©"""
        host = request.headers.get("host", "")
        host_without_port = host.split(":")[0]
        return host_without_port in self.allowed_hosts
    
    def _detect_attack_patterns(self, request: Request) -> bool:
        """D√©tecte les patterns d'attaques communes"""
        import re
        
        # V√©rifier l'URL
        url_str = str(request.url)
        for pattern in self.suspicious_patterns:
            if re.search(pattern, url_str, re.IGNORECASE):
                return True
        
        # V√©rifier les headers
        for header_name, header_value in request.headers.items():
            for pattern in self.suspicious_patterns:
                if re.search(pattern, header_value, re.IGNORECASE):
                    return True
        
        # V√©rifier User-Agent suspect
        user_agent = request.headers.get("user-agent", "")
        suspicious_agents = ["sqlmap", "nmap", "nikto", "dirb", "gobuster", "curl/7"]
        if any(agent in user_agent.lower() for agent in suspicious_agents):
            return True
        
        return False
    
    def _check_request_size(self, request: Request) -> bool:
        """V√©rifie la taille de la requ√™te"""
        content_length = request.headers.get("content-length")
        if content_length:
            try:
                size = int(content_length)
                # Limite √† 50MB (sauf pour uploads)
                max_size = 50 * 1024 * 1024
                if "/upload" in str(request.url):
                    max_size = 100 * 1024 * 1024  # 100MB pour uploads
                return size <= max_size
            except ValueError:
                return False
        return True
    
    def _add_security_headers(self, response: Response):
        """Ajoute des headers de s√©curit√© suppl√©mentaires"""
        response.headers["Strict-Transport-Security"] = "max-age=31536000; includeSubDomains"
        response.headers["X-Download-Options"] = "noopen"
        response.headers["X-Permitted-Cross-Domain-Policies"] = "none"
        
        # Header personnalis√© pour identifier l'application
        response.headers["X-Powered-By"] = "LocAppart-Secure"
    
    def _log_suspicious_activity(self, request: Request):
        """Log une activit√© suspecte"""
        client_ip = self._get_client_ip(request)
        user_agent = request.headers.get("user-agent", "unknown")
        
        print(f"üö® ACTIVIT√â SUSPECTE D√âTECT√âE:")
        print(f"   IP: {client_ip}")
        print(f"   URL: {request.url}")
        print(f"   User-Agent: {user_agent}")
        print(f"   Method: {request.method}")
        
        # Ajouter √† la blacklist temporaire apr√®s 3 tentatives
        # (En production, utiliser Redis ou base de donn√©es)
        
    def _log_slow_request(self, request: Request, process_time: float):
        """Log une requ√™te lente"""
        client_ip = self._get_client_ip(request)
        print(f"‚ö†Ô∏è  REQU√äTE LENTE D√âTECT√âE:")
        print(f"   IP: {client_ip}")
        print(f"   URL: {request.url}")
        print(f"   Temps: {process_time:.2f}s")

def create_security_middleware(allowed_hosts: Set[str] = None):
    """Factory pour cr√©er le middleware de s√©curit√©"""
    if not allowed_hosts:
        # R√©cup√©rer depuis les variables d'environnement
        hosts_env = os.getenv("ALLOWED_HOSTS", "localhost,127.0.0.1")
        allowed_hosts = set(host.strip() for host in hosts_env.split(","))
    
    return SecurityMiddleware(None, allowed_hosts)